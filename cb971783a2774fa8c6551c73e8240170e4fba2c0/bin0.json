{"9980585cfd4c0724599f3378f80589dc35d5df2c": "{\"params\":{\"model\":\"o4-mini\",\"n\":1,\"num_candidates_per_completion\":1,\"insufficient_valids_behaviour\":\"retry\",\"temperature\":1.0,\"top_p\":null,\"max_tokens\":5000,\"thinking\":null,\"logprobs\":null,\"seed\":null,\"logit_bias\":null,\"stop\":null,\"unknown_kwargs\":{}},\"prompt\":{\"messages\":[{\"role\":\"system\",\"content\":\"Please solve this Codeforces problem by writing a Python solution. Return only the code and nothing else.\"},{\"role\":\"user\",\"content\":\"Problem: Monocarp plays a computer game. In this game, he maintains a space empire. The empire is governed by $$$n$$$ political parties. Initially, every party has political power equal to $$$0$$$, and there is no ruling party.\\n\\nDuring each of the next $$$m$$$ turns, the following happens:\\n\\n1. initially, Monocarp has to choose which party he supports. He can support any party, except for the ruling party. When Monocarp supports a party, its political power is increased by $$$1$$$. If Monocarp supports the $$$i$$$-th party during the $$$j$$$-th turn, his score increases by $$$a_{i,j}$$$ points;\\n2. then, the elections happen, and the party with the maximum political power is chosen as the ruling party (if there are multiple such parties, the party with the lowest index among them is chosen). The former ruling party is replaced, unless it is chosen again;\\n3. finally, an event happens. At the end of the $$$j$$$-th turn, the party $$$p_j$$$ must be the ruling party to prevent a bad outcome of the event, otherwise Monocarp loses the game.\\n\\nDetermine which party Monocarp has to support during each turn so that he doesn't lose the game due to the events, and the score he achieves is the maximum possible. Initially, Monocarp's score is $$$0$$$.\\n\\nTest Case Format:\\nThe first line contains two integers $$$n$$$ and $$$m$$$ ($$$2 \\\\le n, m \\\\le 50$$$) \u2014 the number of political parties and the number of turns, respectively.\\n\\nThe second line contains $$$m$$$ integers $$$p_1, p_2, \\\\dots, p_m$$$ ($$$1 \\\\le p_j \\\\le n$$$), where $$$p_j$$$ is the index of the party which should be the ruling party at the end of the $$$j$$$-th turn.\\n\\nThen $$$n$$$ lines follow. The $$$i$$$-th of them contains $$$m$$$ integers $$$a_{i,1}, a_{i,2}, \\\\dots, a_{i,m}$$$ ($$$1 \\\\le a_{i,j} \\\\le 10^5$$$), where $$$a_{i,j}$$$ is the amount of points Monocarp gets if he supports the $$$i$$$-th party during the $$$j$$$-th turn.\\n\\nIf Monocarp loses the game no matter how he acts, print one integer $$$-1$$$.\\n\\nOtherwise, print $$$m$$$ integers $$$c_1, c_2, \\\\dots, c_m$$$ ($$$1 \\\\le c_j \\\\le n$$$), where $$$c_j$$$ is the index of the party Monocarp should support during the $$$j$$$-th turn. If there are multiple answers, print any of them.\\n\\nTest Inputs:\\n2 3\\r\\n2 1 2\\r\\n1 2 3\\r\\n4 5 6\\r\\n\\n\\nTest Outputs:\\n2 1 2 \\r\\n\"}]},\"responses\":[{\"model_id\":\"o4-mini\",\"completion\":\"\",\"stop_reason\":\"max_tokens\",\"cost\":0.0007513,\"audio_out\":null,\"duration\":65.46968603134155,\"api_duration\":65.36882495880127,\"logprobs\":null,\"safety_ratings\":null,\"recitation_retries\":null,\"api_failures\":1,\"batch_custom_id\":null,\"reasoning_content\":null,\"usage\":{\"input_tokens\":683,\"output_tokens\":5000,\"total_tokens\":5683,\"prompt_tokens_details\":{\"audio_tokens\":0,\"cached_tokens\":0},\"completion_tokens_details\":{\"accepted_prediction_tokens\":0,\"audio_tokens\":0,\"reasoning_tokens\":5000,\"rejected_prediction_tokens\":0}}}]}", "61d5e0f2c92ebde5b4e1b5a29eff6530cf745880": "{\"params\":{\"model\":\"o4-mini\",\"n\":1,\"num_candidates_per_completion\":1,\"insufficient_valids_behaviour\":\"retry\",\"temperature\":1.0,\"top_p\":null,\"max_tokens\":5000,\"thinking\":null,\"logprobs\":null,\"seed\":null,\"logit_bias\":null,\"stop\":null,\"unknown_kwargs\":{}},\"prompt\":{\"messages\":[{\"role\":\"system\",\"content\":\"Please solve this Codeforces problem by writing a Python solution. Return only the code and nothing else.\"},{\"role\":\"user\",\"content\":\"Problem: A set $$$A$$$ consisting of pairwise distinct segments $$$[l, r]$$$ with integer endpoints is called good if $$$1\\\\le l\\\\le r\\\\le n$$$, and for any pair of distinct segments $$$[l_i, r_i], [l_j, r_j]$$$ in $$$A$$$, exactly one of the following conditions holds:\\n\\n- $$$r_i < l_j$$$ or $$$r_j < l_i$$$ (the segments do not intersect)\\n- $$$l_i \\\\le l_j \\\\le r_j \\\\le r_i$$$ or $$$l_j \\\\le l_i \\\\le r_i \\\\le r_j$$$ (one segment is fully contained within the other)\\n\\nYou are given a good set $$$S$$$ consisting of $$$m$$$ pairwise distinct segments $$$[l_i, r_i]$$$ with integer endpoints. You want to add as many additional segments to the set $$$S$$$ as possible while ensuring that set $$$S$$$ remains good.\\n\\nSince this task is too easy, you need to determine the number of different ways to add the maximum number of additional segments to $$$S$$$, ensuring that the set remains good. Two ways are considered different if there exists a segment that is being added in one of the ways, but not in the other.\\n\\nFormally, you need to find the number of good sets $$$T$$$ of distinct segments, such that $$$S$$$ is a subset of $$$T$$$ and $$$T$$$ has the maximum possible size. Since the result might be very large, compute the answer modulo $$$998\\\\,244\\\\,353$$$.\\n\\nTest Case Format:\\nEach test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \\\\le t \\\\le 10^4$$$). The description of the test cases follows.\\n\\nThe first line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\\\le n \\\\le 2 \\\\cdot 10^5$$$, $$$0 \\\\le m \\\\le 2 \\\\cdot 10^5$$$)\u00a0\u2014 the maximum right endpoint of the segments, and the size of $$$S$$$.\\n\\nThe $$$i$$$-th of the next $$$m$$$ lines contains two integers $$$l_i$$$ and $$$r_i$$$ ($$$1 \\\\le l_i \\\\le r_i \\\\le n$$$)\u00a0\u2014 the boundaries of the segments in set $$$S$$$.\\n\\nIt is guaranteed that the given set $$$S$$$ is good, and the segments in set $$$S$$$ are pairwise distinct.\\n\\nIt is guaranteed that both the sum of $$$n$$$ and the sum of $$$m$$$ over all test cases do not exceed $$$2 \\\\cdot 10^5$$$.\\n\\nFor each test case, output a single integer representing the number of different ways, modulo $$$998\\\\,244\\\\,353$$$, that you can add the maximum number of additional segments to set $$$S$$$ while ensuring that set $$$S$$$ remains good.\\n\\nTest Inputs:\\n6\\r\\n1 0\\r\\n2 3\\r\\n1 1\\r\\n2 2\\r\\n1 2\\r\\n5 2\\r\\n1 3\\r\\n2 3\\r\\n4 1\\r\\n1 1\\r\\n6 2\\r\\n1 3\\r\\n4 6\\r\\n2300 0\\r\\n\\n\\nTest Outputs:\\n1\\r\\n1\\r\\n2\\r\\n5\\r\\n4\\r\\n187997613\\r\\n\"}]},\"responses\":[{\"model_id\":\"o4-mini\",\"completion\":\"\",\"stop_reason\":\"max_tokens\",\"cost\":0.0008272,\"audio_out\":null,\"duration\":35.08994913101196,\"api_duration\":34.9946563243866,\"logprobs\":null,\"safety_ratings\":null,\"recitation_retries\":null,\"api_failures\":2,\"batch_custom_id\":null,\"reasoning_content\":null,\"usage\":{\"input_tokens\":752,\"output_tokens\":5000,\"total_tokens\":5752,\"prompt_tokens_details\":{\"audio_tokens\":0,\"cached_tokens\":0},\"completion_tokens_details\":{\"accepted_prediction_tokens\":0,\"audio_tokens\":0,\"reasoning_tokens\":5000,\"rejected_prediction_tokens\":0}}}]}", "6538ff678ce4298561044454351b04a234dd2b6c": "{\"params\":{\"model\":\"o4-mini\",\"n\":1,\"num_candidates_per_completion\":1,\"insufficient_valids_behaviour\":\"retry\",\"temperature\":1.0,\"top_p\":null,\"max_tokens\":5000,\"thinking\":null,\"logprobs\":null,\"seed\":null,\"logit_bias\":null,\"stop\":null,\"unknown_kwargs\":{}},\"prompt\":{\"messages\":[{\"role\":\"system\",\"content\":\"Please solve this Codeforces problem by writing a Python solution. Return only the code and nothing else.\"},{\"role\":\"user\",\"content\":\"Problem: This is the hard version of the problem. In this version, $$$n \\\\leq 10^6$$$. You can only make hacks if both versions of the problem are solved.\\n\\nOrangutans are powerful beings\u2014so powerful that they only need $$$1$$$ unit of time to destroy every vulnerable planet in the universe!\\n\\nThere are $$$n$$$ planets in the universe. Each planet has an interval of vulnerability $$$[l, r]$$$, during which it will be exposed to destruction by orangutans. Orangutans can also expand the interval of vulnerability of any planet by $$$1$$$ unit.\\n\\nSpecifically, suppose the expansion is performed on planet $$$p$$$ with interval of vulnerability $$$[l_p, r_p]$$$. Then, the resulting interval of vulnerability may be either $$$[l_p - 1, r_p]$$$ or $$$[l_p, r_p + 1]$$$.\\n\\nGiven a set of planets, orangutans can destroy all planets if the intervals of vulnerability of all planets in the set intersect at least one common point. Let the score of such a set denote the minimum number of expansions that must be performed.\\n\\nOrangutans are interested in the sum of scores of all non-empty subsets of the planets in the universe. As the answer can be large, output it modulo $$$998\\\\,244\\\\,353$$$.\\n\\nTest Case Format:\\nThe first line contains an integer $$$t$$$ ($$$1 \\\\leq t \\\\leq 10^4$$$)\u00a0\u2014 the number of test cases.\\n\\nThe first line of each test case contains an integer $$$n$$$ ($$$1 \\\\leq n \\\\leq 10^6$$$)\u00a0\u2014 the number of planets in the universe.\\n\\nThe following $$$n$$$ lines contain two integers $$$l_i$$$ and $$$r_i$$$ ($$$1 \\\\leq l_i \\\\leq r_i \\\\leq n$$$)\u00a0\u2014 the initial interval of vulnerability of the $$$i$$$-th planet.\\n\\nIt is guaranteed that the sum of $$$n$$$ does not exceed $$$10^6$$$ over all test cases.\\n\\nFor each test case, output an integer\u00a0\u2014 the sum of scores to destroy all non-empty subsets of the planets in the universe, modulo $$$998\\\\,244\\\\,353$$$.\\n\\nTest Inputs:\\n3\\r\\n3\\r\\n1 1\\r\\n2 3\\r\\n3 3\\r\\n4\\r\\n1 4\\r\\n2 3\\r\\n2 4\\r\\n1 1\\r\\n5\\r\\n1 2\\r\\n2 3\\r\\n3 4\\r\\n4 5\\r\\n1 5\\r\\n\\n\\nTest Outputs:\\n5\\r\\n6\\r\\n24\\r\\n\"}]},\"responses\":[{\"model_id\":\"o4-mini\",\"completion\":\"\",\"stop_reason\":\"max_tokens\",\"cost\":0.0006435000000000001,\"audio_out\":null,\"duration\":47.55487418174744,\"api_duration\":47.459402084350586,\"logprobs\":null,\"safety_ratings\":null,\"recitation_retries\":null,\"api_failures\":2,\"batch_custom_id\":null,\"reasoning_content\":null,\"usage\":{\"input_tokens\":585,\"output_tokens\":5000,\"total_tokens\":5585,\"prompt_tokens_details\":{\"audio_tokens\":0,\"cached_tokens\":0},\"completion_tokens_details\":{\"accepted_prediction_tokens\":0,\"audio_tokens\":0,\"reasoning_tokens\":5000,\"rejected_prediction_tokens\":0}}}]}", "cd0e8afc563ac5d275bcf40f12f237592dd2f1ec": "{\"params\":{\"model\":\"o4-mini\",\"n\":1,\"num_candidates_per_completion\":1,\"insufficient_valids_behaviour\":\"retry\",\"temperature\":1.0,\"top_p\":null,\"max_tokens\":5000,\"thinking\":null,\"logprobs\":null,\"seed\":null,\"logit_bias\":null,\"stop\":null,\"unknown_kwargs\":{}},\"prompt\":{\"messages\":[{\"role\":\"system\",\"content\":\"Please solve this Codeforces problem by writing a Python solution. Return only the code and nothing else.\"},{\"role\":\"user\",\"content\":\"Problem: You are given a tree consisting of $$$2n$$$ vertices. Recall that a tree is a connected undirected graph with no cycles. Each vertex has an integer from $$$1$$$ to $$$n$$$ written on it. Each value from $$$1$$$ to $$$n$$$ is written on exactly two different vertices. Each vertex also has a cost\u00a0\u2014vertex $$$i$$$ costs $$$2^i$$$.\\n\\nYou need to choose a subset of vertices of the tree such that:\\n\\n- the subset is connected; that is, from each vertex in the subset, you can reach every other vertex in the subset by passing only through the vertices in the subset;\\n- each value from $$$1$$$ to $$$n$$$ is written on at least one vertex in the subset.\\n\\nAmong all such subsets, you need to find the one with the smallest total cost of the vertices in it. Note that you are not required to minimize the number of vertices in the subset.\\n\\nTest Case Format:\\nThe first line contains a single integer $$$n$$$ ($$$1 \\\\le n \\\\le 2 \\\\cdot 10^5$$$).\\n\\nThe second line contains $$$2n$$$ integers $$$a_1, a_2, \\\\dots, a_{2n}$$$ ($$$1 \\\\le a_i \\\\le n$$$). Each value from $$$1$$$ to $$$n$$$ appears exactly twice.\\n\\nEach of the next $$$2n-1$$$ lines contains two integers $$$v$$$ and $$$u$$$ ($$$1 \\\\le v, u \\\\le 2n$$$)\u00a0\u2014 the edges of the tree. These edges form a valid tree.\\n\\nIn the first line, print a single integer $$$k$$$\u00a0\u2014 the number of vertices in the subset.\\n\\nIn the second line, print $$$k$$$ distinct integers from $$$1$$$ to $$$2n$$$\u00a0\u2014 the indices of the vertices in the chosen subset. The vertices can be printed in an arbitrary order.\\n\\nTest Inputs:\\n3\\r\\n1 1 3 2 3 2\\r\\n4 2\\r\\n1 6\\r\\n6 2\\r\\n6 3\\r\\n2 5\\r\\n\\n\\nTest Outputs:\\n3\\r\\n2 4 5 \\r\\n\"}]},\"responses\":[{\"model_id\":\"o4-mini\",\"completion\":\"\",\"stop_reason\":\"max_tokens\",\"cost\":0.0005456,\"audio_out\":null,\"duration\":33.422602891922,\"api_duration\":33.326602935791016,\"logprobs\":null,\"safety_ratings\":null,\"recitation_retries\":null,\"api_failures\":2,\"batch_custom_id\":null,\"reasoning_content\":null,\"usage\":{\"input_tokens\":496,\"output_tokens\":5000,\"total_tokens\":5496,\"prompt_tokens_details\":{\"audio_tokens\":0,\"cached_tokens\":0},\"completion_tokens_details\":{\"accepted_prediction_tokens\":0,\"audio_tokens\":0,\"reasoning_tokens\":5000,\"rejected_prediction_tokens\":0}}}]}", "8aa0e04bd11243f9bd8c2bd8b1a6ee09e403cf18": "{\"params\":{\"model\":\"o4-mini\",\"n\":1,\"num_candidates_per_completion\":1,\"insufficient_valids_behaviour\":\"retry\",\"temperature\":1.0,\"top_p\":null,\"max_tokens\":5000,\"thinking\":null,\"logprobs\":null,\"seed\":null,\"logit_bias\":null,\"stop\":null,\"unknown_kwargs\":{}},\"prompt\":{\"messages\":[{\"role\":\"system\",\"content\":\"Please solve this Codeforces problem by writing a Python solution. Return only the code and nothing else.\"},{\"role\":\"user\",\"content\":\"Problem: Alice is at the bottom of the rabbit hole! The rabbit hole can be modeled as a tree$$$^{\\\\text{\u2217}}$$$ which has an exit at vertex $$$1$$$, and Alice starts at some vertex $$$v$$$. She wants to get out of the hole, but unfortunately, the Queen of Hearts has ordered her execution.\\n\\nEach minute, a fair coin is flipped. If it lands heads, Alice gets to move to an adjacent vertex of her current location, and otherwise, the Queen of Hearts gets to pull Alice to an adjacent vertex of the Queen's choosing. If Alice ever ends up on any of the non-root leaves$$$^{\\\\text{\u2020}}$$$ of the tree, Alice loses.\\n\\nAssuming both of them move optimally, compute the probability that Alice manages to escape for every single starting vertex $$$1\\\\le v\\\\le n$$$. Since these probabilities can be very small, output them modulo $$$998\\\\,244\\\\,353$$$.\\n\\nFormally, let $$$M = 998\\\\,244\\\\,353$$$. It can be shown that the exact answer can be expressed as an irreducible fraction $$$\\\\frac{p}{q}$$$, where $$$p$$$ and $$$q$$$ are integers and $$$q \\\\not \\\\equiv 0 \\\\pmod{M}$$$. Output the integer equal to $$$p \\\\cdot q^{-1} \\\\bmod M$$$. In other words, output such an integer $$$x$$$ that $$$0 \\\\le x < M$$$ and $$$x \\\\cdot q \\\\equiv p \\\\pmod{M}$$$.\\n\\nTest Case Format:\\nEach test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \\\\le t \\\\le 10^4$$$). The description of the test cases follows.\\n\\nThe first line of each test case contains a single integer $$$n$$$ ($$$2\\\\le n\\\\le 2\\\\cdot 10^5$$$) \u2014 the number of vertices in the tree.\\n\\nThe $$$i$$$-th of the next $$$n - 1$$$ lines contains two integers $$$x_i$$$ and $$$y_i$$$ ($$$1 \\\\le x_i, y_i \\\\le n$$$ and $$$x_i \\\\neq y_i$$$) \u2014 the edges of the tree. It is guaranteed that the given edges form a tree.\\n\\nIt is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2\\\\cdot 10^5$$$.\\n\\nFor each test case, output $$$n$$$ integers on one line \u2014 the probabilities of Alice escaping starting from vertex $$$1, 2, \\\\ldots, n$$$. Since these probabilities can be very small, output them modulo $$$998\\\\,244\\\\,353$$$.\\n\\nTest Inputs:\\n2\\r\\n5\\r\\n1 2\\r\\n1 3\\r\\n2 4\\r\\n3 5\\r\\n9\\r\\n1 2\\r\\n2 3\\r\\n4 5\\r\\n5 6\\r\\n7 8\\r\\n8 9\\r\\n2 4\\r\\n5 7\\r\\n\\n\\nTest Outputs:\\n1 499122177 499122177 0 0 \\r\\n1 499122177 0 332748118 166374059 0 443664157 720954255 0 \\r\\n\"}]},\"responses\":[{\"model_id\":\"o4-mini\",\"completion\":\"\",\"stop_reason\":\"max_tokens\",\"cost\":0.0007942,\"audio_out\":null,\"duration\":45.954034090042114,\"api_duration\":45.862736225128174,\"logprobs\":null,\"safety_ratings\":null,\"recitation_retries\":null,\"api_failures\":2,\"batch_custom_id\":null,\"reasoning_content\":null,\"usage\":{\"input_tokens\":722,\"output_tokens\":5000,\"total_tokens\":5722,\"prompt_tokens_details\":{\"audio_tokens\":0,\"cached_tokens\":0},\"completion_tokens_details\":{\"accepted_prediction_tokens\":0,\"audio_tokens\":0,\"reasoning_tokens\":5000,\"rejected_prediction_tokens\":0}}}]}", "57fc8b674777069fc32a3d195a6b6f403b7b6b64": "{\"params\":{\"model\":\"o4-mini\",\"n\":1,\"num_candidates_per_completion\":1,\"insufficient_valids_behaviour\":\"retry\",\"temperature\":1.0,\"top_p\":null,\"max_tokens\":5000,\"thinking\":null,\"logprobs\":null,\"seed\":null,\"logit_bias\":null,\"stop\":null,\"unknown_kwargs\":{}},\"prompt\":{\"messages\":[{\"role\":\"system\",\"content\":\"Please solve this Codeforces problem by writing a Python solution. Return only the code and nothing else.\"},{\"role\":\"user\",\"content\":\"Problem: This is the hard version of the problem. The only differences between the two versions are the constraints on $$$k$$$ and the sum of $$$k$$$.\\n\\nIn ancient Persia, Khayyam, a clever merchant and mathematician, is playing a game with his prized treasure chest containing $$$n$$$ red rubies worth $$$2$$$ dinars each and $$$m$$$ blue sapphires worth $$$1$$$ dinar each. He also has a satchel, which starts empty, and $$$k$$$ scrolls with pairs $$$(r_1, b_1), (r_2, b_2), \\\\ldots, (r_k, b_k)$$$ that describe special conditions.\\n\\nThe game proceeds for $$$n + m$$$ turns as follows:\\n\\n1. Khayyam draws a gem uniformly at random from the chest.\\n2. He removes the gem from the chest and places it in his satchel.\\n3. If there exists a scroll $$$i$$$ ($$$1 \\\\leq i \\\\leq k$$$) such that the chest contains exactly $$$r_i$$$ red rubies and $$$b_i$$$ blue sapphires, Khayyam receives a royal decree that doubles the value of all the gems in his satchel as a reward for achieving a special configuration.\\n\\nNote that the value of some gems might be affected by multiple decrees, and in that case the gems' value is doubled multiple times.\\n\\nDetermine the expected value of Khayyam's satchel at the end of the game, modulo $$$998,244,353$$$.\\n\\nFormally, let $$$M = 998,244,353$$$. It can be shown that the exact answer can be expressed as an irreducible fraction $$$\\\\frac{p}{q}$$$, where $$$p$$$ and $$$q$$$ are integers and $$$q \\\\not \\\\equiv 0 \\\\pmod{M}$$$. Output the integer equal to $$$p \\\\cdot q^{-1} \\\\bmod M$$$. In other words, output such an integer $$$x$$$ that $$$0 \\\\le x < M$$$ and $$$x \\\\cdot q \\\\equiv p \\\\pmod{M}$$$.\\n\\nTest Case Format:\\nEach test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \\\\le t \\\\le 500$$$). The description of the test cases follows.\\n\\nThe first line of each test case contains three integers $$$n$$$, $$$m$$$, and $$$k$$$ ($$$1 \\\\leq n, m \\\\leq 2 \\\\cdot 10^5$$$, $$$0 \\\\leq k \\\\leq 5000$$$)\u00a0\u2014 the number of red rubies, the number of blue sapphires, and the number of scrolls describing special conditions, respectively.\\n\\nEach of the next $$$k$$$ lines contains two integers $$$r_i$$$, $$$b_i$$$ ($$$0 \\\\leq r_i \\\\leq n$$$, $$$0 \\\\leq b_i \\\\leq m$$$, $$$1 \\\\leq r_i + b_i \\\\leq n+m-1$$$). It is guaranteed that the pairs $$$(r_i, b_i)$$$ are distinct.\\n\\nIt is guaranteed that the sum of $$$n$$$ and the sum of $$$m$$$ over all test cases do not exceed $$$2 \\\\cdot 10^5$$$, and the sum of $$$k$$$ over all test cases does not exceed $$$5000$$$.\\n\\nFor each test case, print a single integer: the expected value of Khayyam's satchel at the end of the process, modulo $$$998,244,353$$$.\\n\\nTest Inputs:\\n5\\r\\n3 4 0\\r\\n1 1 1\\r\\n1 0\\r\\n3 3 2\\r\\n1 1\\r\\n2 2\\r\\n3 3 2\\r\\n2 1\\r\\n1 2\\r\\n10 4 5\\r\\n1 0\\r\\n8 0\\r\\n6 4\\r\\n0 2\\r\\n7 4\\r\\n\\n\\nTest Outputs:\\n10\\r\\n499122180\\r\\n798595498\\r\\n149736666\\r\\n414854846\\r\\n\"}]},\"responses\":[{\"model_id\":\"o4-mini\",\"completion\":\"\",\"stop_reason\":\"max_tokens\",\"cost\":0.0009999,\"audio_out\":null,\"duration\":37.21229791641235,\"api_duration\":37.11598014831543,\"logprobs\":null,\"safety_ratings\":null,\"recitation_retries\":null,\"api_failures\":2,\"batch_custom_id\":null,\"reasoning_content\":null,\"usage\":{\"input_tokens\":909,\"output_tokens\":5000,\"total_tokens\":5909,\"prompt_tokens_details\":{\"audio_tokens\":0,\"cached_tokens\":0},\"completion_tokens_details\":{\"accepted_prediction_tokens\":0,\"audio_tokens\":0,\"reasoning_tokens\":5000,\"rejected_prediction_tokens\":0}}}]}"}